using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace CloudflareD1.NET.Migrations
{
    /// <summary>
    /// Fluent API for building database migrations.
    /// Provides methods for creating tables, adding columns, creating indexes, etc.
    /// </summary>
    public class MigrationBuilder
    {
        private readonly List<string> _statements = new List<string>();

        /// <summary>
        /// Gets the list of SQL statements generated by this builder.
        /// </summary>
        public IReadOnlyList<string> Statements => _statements.AsReadOnly();

        /// <summary>
        /// Executes raw SQL as part of the migration.
        /// </summary>
        /// <param name="sql">The SQL statement to execute.</param>
        public MigrationBuilder Sql(string sql)
        {
            if (string.IsNullOrWhiteSpace(sql))
                throw new ArgumentException("SQL cannot be null or empty.", nameof(sql));

            _statements.Add(sql);
            return this;
        }

        /// <summary>
        /// Creates a new table.
        /// </summary>
        /// <param name="tableName">The name of the table to create.</param>
        /// <param name="buildAction">Action to define the table columns and constraints.</param>
        public MigrationBuilder CreateTable(string tableName, Action<TableBuilder> buildAction)
        {
            if (string.IsNullOrWhiteSpace(tableName))
                throw new ArgumentException("Table name cannot be null or empty.", nameof(tableName));
            if (buildAction == null)
                throw new ArgumentNullException(nameof(buildAction));

            var tableBuilder = new TableBuilder(tableName);
            buildAction(tableBuilder);

            _statements.Add(tableBuilder.BuildCreateTableSql());
            return this;
        }

        /// <summary>
        /// Drops an existing table.
        /// </summary>
        /// <param name="tableName">The name of the table to drop.</param>
        /// <param name="ifExists">If true, adds IF EXISTS clause to avoid errors if table doesn't exist.</param>
        public MigrationBuilder DropTable(string tableName, bool ifExists = true)
        {
            if (string.IsNullOrWhiteSpace(tableName))
                throw new ArgumentException("Table name cannot be null or empty.", nameof(tableName));

            var sql = ifExists
                ? $"DROP TABLE IF EXISTS {tableName}"
                : $"DROP TABLE {tableName}";

            _statements.Add(sql);
            return this;
        }

        /// <summary>
        /// Adds a column to an existing table.
        /// </summary>
        /// <param name="tableName">The name of the table.</param>
        /// <param name="columnName">The name of the column to add.</param>
        /// <param name="columnType">The column type (e.g., "TEXT", "INTEGER", "REAL").</param>
        /// <param name="nullable">Whether the column allows NULL values.</param>
        /// <param name="defaultValue">Optional default value for the column.</param>
        public MigrationBuilder AddColumn(string tableName, string columnName, string columnType, bool nullable = true, string? defaultValue = null)
        {
            if (string.IsNullOrWhiteSpace(tableName))
                throw new ArgumentException("Table name cannot be null or empty.", nameof(tableName));
            if (string.IsNullOrWhiteSpace(columnName))
                throw new ArgumentException("Column name cannot be null or empty.", nameof(columnName));
            if (string.IsNullOrWhiteSpace(columnType))
                throw new ArgumentException("Column type cannot be null or empty.", nameof(columnType));

            var sql = new StringBuilder($"ALTER TABLE {tableName} ADD COLUMN {columnName} {columnType}");

            if (!nullable)
                sql.Append(" NOT NULL");

            if (defaultValue != null)
                sql.Append($" DEFAULT {defaultValue}");

            _statements.Add(sql.ToString());
            return this;
        }

        /// <summary>
        /// Drops a column from an existing table.
        /// Note: SQLite has limited support for DROP COLUMN (requires SQLite 3.35.0+)
        /// </summary>
        /// <param name="tableName">The name of the table.</param>
        /// <param name="columnName">The name of the column to drop.</param>
        public MigrationBuilder DropColumn(string tableName, string columnName)
        {
            if (string.IsNullOrWhiteSpace(tableName))
                throw new ArgumentException("Table name cannot be null or empty.", nameof(tableName));
            if (string.IsNullOrWhiteSpace(columnName))
                throw new ArgumentException("Column name cannot be null or empty.", nameof(columnName));

            _statements.Add($"ALTER TABLE {tableName} DROP COLUMN {columnName}");
            return this;
        }

        /// <summary>
        /// Renames a column in an existing table.
        /// </summary>
        /// <param name="tableName">The name of the table.</param>
        /// <param name="oldColumnName">The current column name.</param>
        /// <param name="newColumnName">The new column name.</param>
        public MigrationBuilder RenameColumn(string tableName, string oldColumnName, string newColumnName)
        {
            if (string.IsNullOrWhiteSpace(tableName))
                throw new ArgumentException("Table name cannot be null or empty.", nameof(tableName));
            if (string.IsNullOrWhiteSpace(oldColumnName))
                throw new ArgumentException("Old column name cannot be null or empty.", nameof(oldColumnName));
            if (string.IsNullOrWhiteSpace(newColumnName))
                throw new ArgumentException("New column name cannot be null or empty.", nameof(newColumnName));

            _statements.Add($"ALTER TABLE {tableName} RENAME COLUMN {oldColumnName} TO {newColumnName}");
            return this;
        }

        /// <summary>
        /// Renames a table.
        /// </summary>
        /// <param name="oldTableName">The current table name.</param>
        /// <param name="newTableName">The new table name.</param>
        public MigrationBuilder RenameTable(string oldTableName, string newTableName)
        {
            if (string.IsNullOrWhiteSpace(oldTableName))
                throw new ArgumentException("Old table name cannot be null or empty.", nameof(oldTableName));
            if (string.IsNullOrWhiteSpace(newTableName))
                throw new ArgumentException("New table name cannot be null or empty.", nameof(newTableName));

            _statements.Add($"ALTER TABLE {oldTableName} RENAME TO {newTableName}");
            return this;
        }

        /// <summary>
        /// Creates an index on one or more columns.
        /// </summary>
        /// <param name="indexName">The name of the index.</param>
        /// <param name="tableName">The name of the table.</param>
        /// <param name="columns">The columns to index.</param>
        /// <param name="unique">Whether the index should enforce uniqueness.</param>
        public MigrationBuilder CreateIndex(string indexName, string tableName, string[] columns, bool unique = false)
        {
            if (string.IsNullOrWhiteSpace(indexName))
                throw new ArgumentException("Index name cannot be null or empty.", nameof(indexName));
            if (string.IsNullOrWhiteSpace(tableName))
                throw new ArgumentException("Table name cannot be null or empty.", nameof(tableName));
            if (columns == null || columns.Length == 0)
                throw new ArgumentException("Columns cannot be null or empty.", nameof(columns));

            var uniqueKeyword = unique ? "UNIQUE " : "";
            var columnList = string.Join(", ", columns);

            _statements.Add($"CREATE {uniqueKeyword}INDEX {indexName} ON {tableName} ({columnList})");
            return this;
        }

        /// <summary>
        /// Drops an index.
        /// </summary>
        /// <param name="indexName">The name of the index to drop.</param>
        /// <param name="ifExists">If true, adds IF EXISTS clause to avoid errors if index doesn't exist.</param>
        public MigrationBuilder DropIndex(string indexName, bool ifExists = true)
        {
            if (string.IsNullOrWhiteSpace(indexName))
                throw new ArgumentException("Index name cannot be null or empty.", nameof(indexName));

            var sql = ifExists
                ? $"DROP INDEX IF EXISTS {indexName}"
                : $"DROP INDEX {indexName}";

            _statements.Add(sql);
            return this;
        }

        /// <summary>
        /// Clears all generated SQL statements.
        /// </summary>
        internal void Clear()
        {
            _statements.Clear();
        }
    }
}
